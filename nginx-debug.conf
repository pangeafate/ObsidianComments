# Debug nginx configuration with extensive logging
events {
    worker_connections 1024;
    use epoll;
    worker_rlimit_nofile 2048;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Extensive logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time"';

    log_format debug '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time" '
                    'host="$host" server_name="$server_name" '
                    'upstream_addr="$upstream_addr" upstream_status="$upstream_status"';

    # Enable detailed access and error logging
    access_log /var/log/nginx/access.log debug;
    error_log /var/log/nginx/error.log debug;

    # Basic settings with debug-friendly values
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;
    client_body_timeout 60s;
    client_header_timeout 60s;

    # Disable rate limiting for debugging
    # limit_req_zone $binary_remote_addr zone=api:10m rate=100r/s;
    # limit_req_zone $binary_remote_addr zone=general:10m rate=300r/s;

    # Upstream servers with detailed monitoring
    upstream backend {
        server backend:8081 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream hocuspocus {
        server hocuspocus:8082 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream frontend {
        server frontend:80 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # HTTP server (redirect to HTTPS in production)
    server {
        listen 80;
        server_name obsidiancomments.serverado.app localhost;

        # Enhanced access logging for HTTP
        access_log /var/log/nginx/http_access.log debug;
        error_log /var/log/nginx/http_error.log debug;

        # For Let's Encrypt challenges
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
            access_log /var/log/nginx/acme_access.log debug;
        }

        # Debug endpoint for HTTP
        location /debug {
            access_log /var/log/nginx/debug_access.log debug;
            return 200 "HTTP Debug Endpoint OK\nTime: $time_iso8601\nHost: $host\nRemote: $remote_addr\n";
            add_header Content-Type text/plain;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "nginx debug healthy\n";
            add_header Content-Type text/plain;
        }

        # Redirect all other traffic to HTTPS (except in debug mode)
        location / {
            # For debugging, serve directly instead of redirecting
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Debug-Mode "HTTP";
            
            # Add debug headers
            add_header X-Debug-Upstream "frontend" always;
            add_header X-Debug-Time "$time_iso8601" always;
        }
    }

    # HTTPS server
    server {
        listen 443 ssl http2;
        server_name obsidiancomments.serverado.app;

        # Enhanced access logging for HTTPS
        access_log /var/log/nginx/https_access.log debug;
        error_log /var/log/nginx/https_error.log debug;

        # SSL configuration with debug-friendly settings
        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Security headers (relaxed for debugging)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        # Relaxed CSP for debugging
        add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: https: ws:; object-src 'none'; frame-src 'none'; frame-ancestors 'none'; form-action 'self'; base-uri 'self';" always;

        # Debug endpoint for HTTPS
        location /debug {
            access_log /var/log/nginx/debug_access.log debug;
            return 200 "HTTPS Debug Endpoint OK\nTime: $time_iso8601\nHost: $host\nRemote: $remote_addr\nSSL Protocol: $ssl_protocol\nSSL Cipher: $ssl_cipher\n";
            add_header Content-Type text/plain;
        }

        # API routes with detailed logging
        location /api/ {
            access_log /var/log/nginx/api_access.log debug;
            error_log /var/log/nginx/api_error.log debug;
            
            # Disabled for debugging: limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Debug headers
            add_header X-Debug-Upstream "backend" always;
            add_header X-Debug-Backend-Status "$upstream_status" always;
            add_header X-Debug-Time "$time_iso8601" always;
            
            # Longer timeouts for debugging
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # WebSocket connections for real-time collaboration
        location /ws {
            access_log /var/log/nginx/ws_access.log debug;
            error_log /var/log/nginx/ws_error.log debug;
            
            proxy_pass http://hocuspocus;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Debug headers
            add_header X-Debug-Upstream "hocuspocus" always;
            add_header X-Debug-WS-Status "$upstream_status" always;
            
            # WebSocket specific timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 3600s; # 1 hour for long-lived connections
        }

        # Frontend static files with detailed logging
        location / {
            access_log /var/log/nginx/frontend_access.log debug;
            error_log /var/log/nginx/frontend_error.log debug;
            
            # Disabled for debugging: limit_req zone=general burst=50 nodelay;
            
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Debug headers
            add_header X-Debug-Upstream "frontend" always;
            add_header X-Debug-Frontend-Status "$upstream_status" always;
            add_header X-Debug-Time "$time_iso8601" always;
            
            # Disable caching for debugging
            # proxy_cache_bypass $http_pragma $http_authorization;
        }
        
        # Static assets with debug info
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            access_log /var/log/nginx/static_access.log debug;
            
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Debug headers for static assets
            add_header X-Debug-Upstream "frontend-static" always;
            add_header X-Debug-Asset-Type "$uri" always;
            
            # Disable caching for debugging
            # expires 1y;
            # add_header Cache-Control "public, immutable";
        }

        # Health checks with debug info
        location /health {
            access_log /var/log/nginx/health_access.log debug;
            return 200 "nginx debug healthy\nTime: $time_iso8601\nUpstreams:\n  backend: available\n  hocuspocus: available\n  frontend: available\n";
            add_header Content-Type text/plain;
        }
    }
}