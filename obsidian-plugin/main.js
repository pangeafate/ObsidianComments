/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  ShareNotePlugin: () => ShareNotePlugin,
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/settings.ts
var DEFAULT_SETTINGS = {
  backendUrl: "https://obsidiancomments.serverado.app",
  copyToClipboard: true,
  showNotifications: true,
  openInBrowser: false
};

// src/api.ts
var BackendAPI = class {
  constructor(baseUrl) {
    this.baseUrl = baseUrl;
  }
  async shareNote(data) {
    try {
      const response = await fetch(`${this.baseUrl}/api/notes/share`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(data)
      });
      if (!response || !response.ok) {
        const errorData = response ? await response.json().catch(() => ({})) : {};
        throw new Error(errorData.message || `HTTP ${(response == null ? void 0 : response.status) || "unknown"}: ${(response == null ? void 0 : response.statusText) || "Network error"}`);
      }
      const result = await response.json();
      if (!result.shareId || !result.viewUrl) {
        throw new Error("Invalid response from backend");
      }
      return result;
    } catch (error) {
      throw error;
    }
  }
  async deleteShare(shareId) {
    const response = await fetch(`${this.baseUrl}/api/notes/${shareId}`, {
      method: "DELETE"
    });
    if (!response || !response.ok) {
      throw new Error(`Failed to delete: ${(response == null ? void 0 : response.statusText) || "Network error"}`);
    }
  }
};

// src/main.ts
var ShareNotePlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.api = new BackendAPI(this.settings.backendUrl);
    this.addRibbonIcon("share", "Share note", () => {
      this.shareCurrentNote();
    });
    this.addCommand({
      id: "share-note",
      name: "Share current note",
      callback: () => this.shareCurrentNote()
    });
    this.addSettingTab(new ShareNoteSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.api = new BackendAPI(this.settings.backendUrl);
  }
  async shareCurrentNote() {
    try {
      const file = this.app.workspace.getActiveFile();
      if (!file) {
        new import_obsidian.Notice("No active file");
        return;
      }
      if (!this.isTextFile(file)) {
        new import_obsidian.Notice("Only text files can be shared");
        return;
      }
      const content = await this.app.vault.read(file);
      const cleanedContent = this.cleanMarkdownContent(content);
      const htmlContent = await this.renderToHTML();
      const cleanTitle = this.extractCleanTitle(file, cleanedContent);
      const shareData = {
        title: cleanTitle,
        content: cleanedContent,
        htmlContent
      };
      const result = await this.api.shareNote(shareData);
      await this.updateFrontmatter(file, result);
      if (this.settings.copyToClipboard && navigator.clipboard) {
        await navigator.clipboard.writeText(result.viewUrl);
      }
      if (this.settings.openInBrowser) {
        window.open(result.viewUrl, "_blank");
      }
      if (this.settings.showNotifications) {
        new import_obsidian.Notice("Note shared successfully!");
      }
    } catch (error) {
      console.error("Failed to share note:", error);
      if (this.settings.showNotifications) {
        new import_obsidian.Notice(`Failed to share note: ${error instanceof Error ? error.message : "Unknown error"}`);
      }
      throw error;
    }
  }
  async renderToHTML() {
    var _a, _b;
    const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!view)
      return "";
    const currentState = view.getState();
    await view.setState({
      ...currentState,
      mode: "preview"
    }, { history: false });
    await new Promise((resolve) => setTimeout(resolve, 100));
    const previewElement = (_b = (_a = view.previewMode) == null ? void 0 : _a.containerEl) == null ? void 0 : _b.querySelector(".markdown-preview-view");
    if (!previewElement)
      return "";
    return this.cleanHTML(previewElement);
  }
  cleanHTML(element) {
    const cloned = element.cloneNode(true);
    cloned.querySelectorAll(".frontmatter").forEach((el) => el.remove());
    cloned.querySelectorAll(".edit-block-button").forEach((el) => el.remove());
    cloned.querySelectorAll("img").forEach((img) => {
      img.removeAttribute("data-obsidian-id");
      img.removeAttribute("data-embed-name");
    });
    cloned.querySelectorAll("script").forEach((el) => el.remove());
    cloned.querySelectorAll("iframe").forEach((el) => el.remove());
    cloned.querySelectorAll("embed").forEach((el) => el.remove());
    cloned.querySelectorAll("object").forEach((el) => el.remove());
    const binaryExtensions = [".pdf", ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx", ".zip", ".rar"];
    binaryExtensions.forEach((ext) => {
      cloned.querySelectorAll(`a[href*="${ext}"]`).forEach((el) => el.remove());
    });
    cloned.querySelectorAll("a.internal-link").forEach((link) => {
      const textNode = document.createTextNode(link.textContent || "");
      link.replaceWith(textNode);
    });
    return cloned.innerHTML;
  }
  isTextFile(file) {
    const textExtensions = [".md", ".txt", ".org", ".tex", ".rst"];
    const binaryExtensions = [
      ".pdf",
      ".doc",
      ".docx",
      ".xls",
      ".xlsx",
      ".ppt",
      ".pptx",
      ".jpg",
      ".jpeg",
      ".png",
      ".gif",
      ".bmp",
      ".svg",
      ".webp",
      ".mp4",
      ".avi",
      ".mov",
      ".wmv",
      ".flv",
      ".mkv",
      ".webm",
      ".mp3",
      ".wav",
      ".flac",
      ".aac",
      ".ogg",
      ".m4a",
      ".zip",
      ".rar",
      ".7z",
      ".tar",
      ".gz",
      ".exe",
      ".dll",
      ".so"
    ];
    const extension = "." + (file.extension || "");
    if (textExtensions.includes(extension.toLowerCase())) {
      return true;
    }
    if (binaryExtensions.includes(extension.toLowerCase())) {
      return false;
    }
    return true;
  }
  cleanMarkdownContent(content) {
    if (!content || typeof content !== "string")
      return "";
    let cleanedContent = content;
    const binaryExtensions = [
      "pdf",
      "doc",
      "docx",
      "xls",
      "xlsx",
      "ppt",
      "pptx",
      "zip",
      "rar",
      "7z",
      "tar",
      "gz",
      "exe"
    ];
    const binaryAttachmentPattern = new RegExp(`\\[\\[([^\\]]+\\.(${binaryExtensions.join("|")}))(\\|[^\\]]*)?\\]\\]`, "gi");
    cleanedContent = cleanedContent.replace(binaryAttachmentPattern, "");
    cleanedContent = cleanedContent.replace(/!\[\[([^\]]+)\]\]/g, "");
    cleanedContent = cleanedContent.replace(/<(script|style|object|embed|iframe)[^>]*>[\s\S]*?<\/\1>/gi, "");
    cleanedContent = cleanedContent.replace(/<(script|style|object|embed|iframe)[^>]*\/>/gi, "");
    cleanedContent = cleanedContent.replace(/\n\s*\n\s*\n/g, "\n\n");
    return cleanedContent.trim();
  }
  extractCleanTitle(file, content) {
    let title = file.basename;
    title = title.replace(/[-_]/g, " ");
    title = title.replace(/\s+/g, " ");
    title = title.trim();
    if (!title || title.length === 0) {
      const h1Match = content.match(/^#\s+(.+)$/m);
      if (h1Match && h1Match[1].trim()) {
        title = h1Match[1].trim();
        title = title.replace(/[*_`~]/g, "");
        title = title.replace(/<[^>]*>/g, "");
      }
    }
    if (!title || title.length === 0) {
      title = "Untitled Note";
    }
    return title;
  }
  async updateFrontmatter(file, shareResult) {
    var _a;
    const content = await this.app.vault.read(file);
    const cache = this.app.metadataCache.getFileCache(file);
    const shareData = {
      share_id: shareResult.shareId,
      share_url: shareResult.viewUrl,
      edit_url: shareResult.editUrl,
      shared_at: (/* @__PURE__ */ new Date()).toISOString()
    };
    let updatedContent;
    if (cache == null ? void 0 : cache.frontmatter) {
      const lines = content.split("\n");
      const endLine = ((_a = cache.frontmatterPosition) == null ? void 0 : _a.end.line) || 0;
      const existingFrontmatter = cache.frontmatter;
      const newFrontmatter = { ...existingFrontmatter, ...shareData };
      const frontmatterLines = [
        "---",
        ...Object.entries(newFrontmatter).map(([key, value]) => {
          if (Array.isArray(value)) {
            return `${key}: [${value.join(", ")}]`;
          }
          return `${key}: ${value}`;
        }),
        "---"
      ];
      const bodyLines = lines.slice(endLine + 1);
      updatedContent = [...frontmatterLines, ...bodyLines].join("\n");
    } else {
      const frontmatterLines = [
        "---",
        ...Object.entries(shareData).map(([key, value]) => `${key}: ${value}`),
        "---"
      ];
      updatedContent = [...frontmatterLines, content].join("\n");
    }
    await this.app.vault.modify(file, updatedContent);
  }
};
var ShareNoteSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Share Note Settings" });
    new import_obsidian.Setting(containerEl).setName("Backend URL").setDesc("URL of your backend server").addText((text) => text.setPlaceholder("https://your-backend.com").setValue(this.plugin.settings.backendUrl).onChange(async (value) => {
      this.plugin.settings.backendUrl = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Copy to clipboard").setDesc("Automatically copy share URL to clipboard").addToggle((toggle) => toggle.setValue(this.plugin.settings.copyToClipboard).onChange(async (value) => {
      this.plugin.settings.copyToClipboard = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Show notifications").setDesc("Show success/error notifications").addToggle((toggle) => toggle.setValue(this.plugin.settings.showNotifications).onChange(async (value) => {
      this.plugin.settings.showNotifications = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Open in browser").setDesc("Automatically open shared note in browser").addToggle((toggle) => toggle.setValue(this.plugin.settings.openInBrowser).onChange(async (value) => {
      this.plugin.settings.openInBrowser = value;
      await this.plugin.saveSettings();
    }));
  }
};
var main_default = ShareNotePlugin;
