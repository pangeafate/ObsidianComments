/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  ShareNotePlugin: () => ShareNotePlugin,
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/settings.ts
var DEFAULT_SETTINGS = {
  backendUrl: "https://obsidiancomments.serverado.app",
  copyToClipboard: true,
  showNotifications: true,
  openInBrowser: false
};

// src/api.ts
var BackendAPI = class {
  constructor(baseUrl) {
    this.baseUrl = baseUrl;
  }
  async shareNote(data) {
    try {
      const response = await fetch(`${this.baseUrl}/api/notes/share`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(data)
      });
      if (!response || !response.ok) {
        const errorData = response ? await response.json().catch(() => ({})) : {};
        throw new Error(errorData.message || `HTTP ${(response == null ? void 0 : response.status) || "unknown"}: ${(response == null ? void 0 : response.statusText) || "Network error"}`);
      }
      const result = await response.json();
      if (!result.shareId || !result.viewUrl) {
        throw new Error("Invalid response from backend");
      }
      return result;
    } catch (error) {
      throw error;
    }
  }
  async deleteShare(shareId) {
    const response = await fetch(`${this.baseUrl}/api/notes/${shareId}`, {
      method: "DELETE"
    });
    if (!response || !response.ok) {
      throw new Error(`Failed to delete: ${(response == null ? void 0 : response.statusText) || "Network error"}`);
    }
  }
};

// src/main.ts
var ShareNotePlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.statusBarItem = null;
  }
  async onload() {
    await this.loadSettings();
    this.api = new BackendAPI(this.settings.backendUrl);
    this.addRibbonIcon("share", "Share note", () => {
      this.shareCurrentNote();
    });
    this.addCommand({
      id: "share-note",
      name: "Share current note",
      callback: () => this.shareCurrentNote()
    });
    this.addCommand({
      id: "unshare-note",
      name: "Stop sharing current note",
      callback: () => this.unshareCurrentNote()
    });
    this.statusBarItem = this.addStatusBarItem();
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", () => {
        this.updateStatusBar();
      })
    );
    this.registerEvent(
      this.app.metadataCache.on("changed", (file) => {
        if (file === this.app.workspace.getActiveFile()) {
          this.updateStatusBar();
        }
      })
    );
    this.updateStatusBar();
    this.addSettingTab(new ShareNoteSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.api = new BackendAPI(this.settings.backendUrl);
  }
  async shareCurrentNote() {
    try {
      const file = this.app.workspace.getActiveFile();
      if (!file) {
        new import_obsidian.Notice("No active file");
        return;
      }
      if (!this.isTextFile(file)) {
        new import_obsidian.Notice("Only text files can be shared");
        return;
      }
      const content = await this.app.vault.read(file);
      const cleanedContent = this.cleanMarkdownContent(content);
      const htmlContent = await this.renderToHTML();
      const cleanTitle = this.extractCleanTitle(file, cleanedContent);
      const shareData = {
        title: cleanTitle,
        content: cleanedContent,
        htmlContent
      };
      const result = await this.api.shareNote(shareData);
      await this.updateFrontmatter(file, result);
      if (this.settings.copyToClipboard && navigator.clipboard) {
        await navigator.clipboard.writeText(result.viewUrl);
      }
      if (this.settings.openInBrowser) {
        window.open(result.viewUrl, "_blank");
      }
      if (this.settings.showNotifications) {
        new import_obsidian.Notice("Note shared successfully!");
      }
      this.updateStatusBar();
    } catch (error) {
      console.error("Failed to share note:", error);
      if (this.settings.showNotifications) {
        new import_obsidian.Notice(`Failed to share note: ${error instanceof Error ? error.message : "Unknown error"}`);
      }
      throw error;
    }
  }
  async renderToHTML() {
    var _a, _b;
    const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!view)
      return "";
    const currentState = view.getState();
    await view.setState({
      ...currentState,
      mode: "preview"
    }, { history: false });
    await new Promise((resolve) => setTimeout(resolve, 100));
    const previewElement = (_b = (_a = view.previewMode) == null ? void 0 : _a.containerEl) == null ? void 0 : _b.querySelector(".markdown-preview-view");
    if (!previewElement)
      return "";
    return this.cleanHTML(previewElement);
  }
  cleanHTML(element) {
    const cloned = element.cloneNode(true);
    cloned.querySelectorAll(".frontmatter").forEach((el) => el.remove());
    cloned.querySelectorAll(".edit-block-button").forEach((el) => el.remove());
    cloned.querySelectorAll("img").forEach((img) => {
      img.removeAttribute("data-obsidian-id");
      img.removeAttribute("data-embed-name");
    });
    cloned.querySelectorAll("script").forEach((el) => el.remove());
    cloned.querySelectorAll("iframe").forEach((el) => el.remove());
    cloned.querySelectorAll("embed").forEach((el) => el.remove());
    cloned.querySelectorAll("object").forEach((el) => el.remove());
    const binaryExtensions = [".pdf", ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx", ".zip", ".rar"];
    binaryExtensions.forEach((ext) => {
      cloned.querySelectorAll(`a[href*="${ext}"]`).forEach((el) => el.remove());
    });
    cloned.querySelectorAll("a.internal-link").forEach((link) => {
      const textNode = document.createTextNode(link.textContent || "");
      link.replaceWith(textNode);
    });
    return cloned.innerHTML;
  }
  isTextFile(file) {
    const textExtensions = [".md", ".txt", ".org", ".tex", ".rst"];
    const binaryExtensions = [
      ".pdf",
      ".doc",
      ".docx",
      ".xls",
      ".xlsx",
      ".ppt",
      ".pptx",
      ".jpg",
      ".jpeg",
      ".png",
      ".gif",
      ".bmp",
      ".svg",
      ".webp",
      ".mp4",
      ".avi",
      ".mov",
      ".wmv",
      ".flv",
      ".mkv",
      ".webm",
      ".mp3",
      ".wav",
      ".flac",
      ".aac",
      ".ogg",
      ".m4a",
      ".zip",
      ".rar",
      ".7z",
      ".tar",
      ".gz",
      ".exe",
      ".dll",
      ".so"
    ];
    const extension = "." + (file.extension || "");
    if (textExtensions.includes(extension.toLowerCase())) {
      return true;
    }
    if (binaryExtensions.includes(extension.toLowerCase())) {
      return false;
    }
    return true;
  }
  cleanMarkdownContent(content) {
    if (!content || typeof content !== "string")
      return "";
    let cleanedContent = content;
    cleanedContent = cleanedContent.replace(/^(---[\s\S]*?---\s*)?(\s*)#\s+.+?(\r?\n|$)/, "$1$2");
    const binaryExtensions = [
      "pdf",
      "doc",
      "docx",
      "xls",
      "xlsx",
      "ppt",
      "pptx",
      "zip",
      "rar",
      "7z",
      "tar",
      "gz",
      "exe"
    ];
    const binaryAttachmentPattern = new RegExp(`\\[\\[([^\\]]+\\.(${binaryExtensions.join("|")}))(\\|[^\\]]*)?\\]\\]`, "gi");
    cleanedContent = cleanedContent.replace(binaryAttachmentPattern, "");
    cleanedContent = cleanedContent.replace(/!\[\[([^\]]+)\]\]/g, "");
    cleanedContent = cleanedContent.replace(/<(script|style|object|embed|iframe)[^>]*>[\s\S]*?<\/\1>/gi, "");
    cleanedContent = cleanedContent.replace(/<(script|style|object|embed|iframe)[^>]*\/>/gi, "");
    cleanedContent = cleanedContent.replace(/\n\s*\n\s*\n/g, "\n\n");
    return cleanedContent.trim();
  }
  extractCleanTitle(file, content) {
    let title = file.basename;
    title = title.replace(/[-_]/g, " ");
    title = title.replace(/\s+/g, " ");
    title = title.trim();
    if (!title || title.length === 0) {
      const h1Match = content.match(/^#\s+(.+)$/m);
      if (h1Match && h1Match[1].trim()) {
        title = h1Match[1].trim();
        title = title.replace(/[*_`~]/g, "");
        title = title.replace(/<[^>]*>/g, "");
      }
    }
    if (!title || title.length === 0) {
      title = "Untitled Note";
    }
    return title;
  }
  async unshareCurrentNote() {
    var _a;
    try {
      const file = this.app.workspace.getActiveFile();
      if (!file) {
        new import_obsidian.Notice("No active file");
        return;
      }
      const content = await this.app.vault.read(file);
      const cache = this.app.metadataCache.getFileCache(file);
      if (!((_a = cache == null ? void 0 : cache.frontmatter) == null ? void 0 : _a.share_id)) {
        new import_obsidian.Notice("Note is not currently shared");
        return;
      }
      const confirmModal = new ConfirmModal(
        this.app,
        "Stop sharing this note?",
        "This will remove the shared link. Anyone with the link will no longer be able to access it."
      );
      confirmModal.onConfirm = async () => {
        const shareId = cache.frontmatter.share_id;
        try {
          await this.api.deleteShare(shareId);
          await this.removeFrontmatter(file);
          if (this.settings.showNotifications) {
            new import_obsidian.Notice("Note unshared successfully");
          }
          this.updateStatusBar();
        } catch (error) {
          console.error("Failed to delete share:", error);
          await this.removeFrontmatter(file);
          if (this.settings.showNotifications) {
            new import_obsidian.Notice("Note unshared locally (backend may still have the share)");
          }
          this.updateStatusBar();
        }
      };
      confirmModal.open();
    } catch (error) {
      console.error("Failed to unshare note:", error);
      console.error("Error details:", {
        type: error instanceof Error ? error.constructor.name : typeof error,
        message: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : void 0
      });
      if (this.settings.showNotifications) {
        new import_obsidian.Notice(`Failed to unshare note: ${error instanceof Error ? error.message : "Unknown error"}`);
      }
    }
  }
  updateStatusBar() {
    var _a;
    if (!this.statusBarItem)
      return;
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      this.statusBarItem.setText("");
      return;
    }
    const cache = this.app.metadataCache.getFileCache(activeFile);
    if ((_a = cache == null ? void 0 : cache.frontmatter) == null ? void 0 : _a.share_id) {
      this.statusBarItem.setText("\u{1F517} Shared");
      this.statusBarItem.addClass("mod-clickable");
      this.statusBarItem.setAttribute("aria-label", "Left-click: copy link | Right-click: unshare");
      this.statusBarItem.onclick = async (e) => {
        e.preventDefault();
        const shareUrl = cache.frontmatter.share_url || cache.frontmatter.edit_url;
        if (shareUrl && navigator.clipboard) {
          await navigator.clipboard.writeText(shareUrl);
          new import_obsidian.Notice("Share link copied to clipboard");
        }
      };
      this.statusBarItem.oncontextmenu = async (e) => {
        e.preventDefault();
        const menu = new import_obsidian.Menu();
        menu.addItem((item) => {
          item.setTitle("Copy share link").setIcon("copy").onClick(async () => {
            const shareUrl = cache.frontmatter.share_url || cache.frontmatter.edit_url;
            if (shareUrl && navigator.clipboard) {
              await navigator.clipboard.writeText(shareUrl);
              new import_obsidian.Notice("Share link copied to clipboard");
            }
          });
        });
        menu.addItem((item) => {
          item.setTitle("Re-share (update)").setIcon("upload").onClick(async () => {
            await this.shareCurrentNote();
          });
        });
        menu.addSeparator();
        menu.addItem((item) => {
          item.setTitle("Stop sharing").setIcon("trash").onClick(async () => {
            await this.unshareCurrentNote();
          });
        });
        menu.showAtMouseEvent(e);
      };
    } else {
      this.statusBarItem.setText("");
      this.statusBarItem.removeClass("mod-clickable");
      this.statusBarItem.onclick = null;
      this.statusBarItem.oncontextmenu = null;
    }
  }
  async removeFrontmatter(file) {
    var _a;
    const content = await this.app.vault.read(file);
    const cache = this.app.metadataCache.getFileCache(file);
    if (!(cache == null ? void 0 : cache.frontmatter)) {
      return;
    }
    const lines = content.split("\n");
    const endLine = ((_a = cache.frontmatterPosition) == null ? void 0 : _a.end.line) || 0;
    const existingFrontmatter = { ...cache.frontmatter };
    delete existingFrontmatter.share_id;
    delete existingFrontmatter.share_url;
    delete existingFrontmatter.edit_url;
    delete existingFrontmatter.shared_at;
    if (Object.keys(existingFrontmatter).length === 0) {
      const bodyLines = lines.slice(endLine + 1);
      while (bodyLines.length > 0 && bodyLines[0].trim() === "") {
        bodyLines.shift();
      }
      await this.app.vault.modify(file, bodyLines.join("\n"));
    } else {
      const frontmatterLines = [
        "---",
        ...Object.entries(existingFrontmatter).map(([key, value]) => {
          if (Array.isArray(value)) {
            return `${key}: [${value.join(", ")}]`;
          }
          return `${key}: ${value}`;
        }),
        "---"
      ];
      const bodyLines = lines.slice(endLine + 1);
      const updatedContent = [...frontmatterLines, ...bodyLines].join("\n");
      await this.app.vault.modify(file, updatedContent);
    }
  }
  async updateFrontmatter(file, shareResult) {
    var _a;
    const content = await this.app.vault.read(file);
    const cache = this.app.metadataCache.getFileCache(file);
    const shareData = {
      share_id: shareResult.shareId,
      share_url: shareResult.viewUrl,
      edit_url: shareResult.editUrl,
      shared_at: (/* @__PURE__ */ new Date()).toISOString()
    };
    let updatedContent;
    if (cache == null ? void 0 : cache.frontmatter) {
      const lines = content.split("\n");
      const endLine = ((_a = cache.frontmatterPosition) == null ? void 0 : _a.end.line) || 0;
      const existingFrontmatter = cache.frontmatter;
      const newFrontmatter = { ...existingFrontmatter, ...shareData };
      const frontmatterLines = [
        "---",
        ...Object.entries(newFrontmatter).map(([key, value]) => {
          if (Array.isArray(value)) {
            return `${key}: [${value.join(", ")}]`;
          }
          return `${key}: ${value}`;
        }),
        "---"
      ];
      const bodyLines = lines.slice(endLine + 1);
      updatedContent = [...frontmatterLines, ...bodyLines].join("\n");
    } else {
      const frontmatterLines = [
        "---",
        ...Object.entries(shareData).map(([key, value]) => `${key}: ${value}`),
        "---"
      ];
      updatedContent = [...frontmatterLines, content].join("\n");
    }
    await this.app.vault.modify(file, updatedContent);
  }
};
var ShareNoteSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Share Note Settings" });
    new import_obsidian.Setting(containerEl).setName("Backend URL").setDesc("URL of your backend server").addText((text) => text.setPlaceholder("https://your-backend.com").setValue(this.plugin.settings.backendUrl).onChange(async (value) => {
      this.plugin.settings.backendUrl = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Copy to clipboard").setDesc("Automatically copy share URL to clipboard").addToggle((toggle) => toggle.setValue(this.plugin.settings.copyToClipboard).onChange(async (value) => {
      this.plugin.settings.copyToClipboard = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Show notifications").setDesc("Show success/error notifications").addToggle((toggle) => toggle.setValue(this.plugin.settings.showNotifications).onChange(async (value) => {
      this.plugin.settings.showNotifications = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Open in browser").setDesc("Automatically open shared note in browser").addToggle((toggle) => toggle.setValue(this.plugin.settings.openInBrowser).onChange(async (value) => {
      this.plugin.settings.openInBrowser = value;
      await this.plugin.saveSettings();
    }));
  }
};
var ConfirmModal = class extends import_obsidian.Modal {
  constructor(app, title, message) {
    super(app);
    this.onConfirm = () => {
    };
    this.title = title;
    this.message = message;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: this.title });
    contentEl.createEl("p", { text: this.message });
    const buttonContainer = contentEl.createDiv({ cls: "modal-button-container" });
    const cancelButton = buttonContainer.createEl("button", { text: "Cancel" });
    cancelButton.addEventListener("click", () => this.close());
    const confirmButton = buttonContainer.createEl("button", { text: "Delete", cls: "mod-warning" });
    confirmButton.addEventListener("click", () => {
      this.onConfirm();
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var main_default = ShareNotePlugin;
