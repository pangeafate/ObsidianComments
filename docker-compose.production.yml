services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-obsidian_comments}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    # No port exposure - only accessible within Docker network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - obsidian_network

  redis:
    image: redis:7-alpine
    # No port exposure - only accessible within Docker network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - obsidian_network

  backend:
    image: ghcr.io/pangeafate/obsidiancomments-backend:latest
    expose:
      - "8081"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-obsidian_comments}
      - REDIS_URL=redis://redis:6379
      - PORT=8081
      - FRONTEND_URL=${FRONTEND_URL:-https://obsidiancomments.serverado.app}
      - CORS_ORIGIN=${CORS_ORIGIN:-https://obsidiancomments.serverado.app}
      - JWT_SECRET=${JWT_SECRET}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-900000}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-100}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - obsidian_network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8081/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  hocuspocus:
    image: ghcr.io/pangeafate/obsidiancomments-hocuspocus:latest
    expose:
      - "8082"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-obsidian_comments}
      - REDIS_URL=redis://redis:6379
      - PORT=8082
      - CORS_ORIGIN=${CORS_ORIGIN:-https://obsidiancomments.serverado.app}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - obsidian_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  frontend:
    image: ghcr.io/pangeafate/obsidiancomments-frontend:latest
    environment:
      - VITE_API_URL=https://obsidiancomments.serverado.app/api
      - VITE_WS_URL=wss://obsidiancomments.serverado.app/ws
    expose:
      - "80"
    restart: unless-stopped
    networks:
      - obsidian_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-http.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
    restart: unless-stopped
    networks:
      - obsidian_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

volumes:
  postgres_data:
  redis_data:
  nginx_logs:

networks:
  obsidian_network:
    driver: bridge