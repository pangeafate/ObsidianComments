# Ephemeral E2E testing stack - designed to be torn down after tests
version: '3.8'

services:
  postgres-e2e:
    image: postgres:15
    environment:
      POSTGRES_DB: obsidian_e2e_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
    volumes:
      - postgres_e2e_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user"]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: "no"
    networks:
      - e2e_network
    ports:
      - "5433:5432"  # Different port to avoid conflicts

  redis-e2e:
    image: redis:7-alpine
    volumes:
      - redis_e2e_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: "no"
    networks:
      - e2e_network
    ports:
      - "6380:6379"  # Different port to avoid conflicts

  backend-e2e:
    image: ${BACKEND_IMAGE:-ghcr.io/pangeafate/obsidiancomments-backend:latest}
    expose:
      - "8081"
    environment:
      - NODE_ENV=test
      - DATABASE_URL=postgresql://test_user:test_password@postgres-e2e:5432/obsidian_e2e_test
      - REDIS_URL=redis://redis-e2e:6379
      - PORT=8081
      - FRONTEND_URL=http://localhost:3001
      - CORS_ORIGIN=http://localhost:3001
      - JWT_SECRET=e2e_test_secret_key_12345
      - RATE_LIMIT_WINDOW=60000
      - RATE_LIMIT_MAX=1000
      - LOG_LEVEL=debug
    depends_on:
      postgres-e2e:
        condition: service_healthy
      redis-e2e:
        condition: service_healthy
    restart: "no"
    networks:
      - e2e_network
    ports:
      - "8083:8081"  # Different port to avoid conflicts
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8081/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  hocuspocus-e2e:
    image: ${HOCUSPOCUS_IMAGE:-ghcr.io/pangeafate/obsidiancomments-hocuspocus:latest}
    expose:
      - "8082"
    environment:
      - NODE_ENV=test
      - DATABASE_URL=postgresql://test_user:test_password@postgres-e2e:5432/obsidian_e2e_test
      - REDIS_URL=redis://redis-e2e:6379
      - PORT=8082
      - CORS_ORIGIN=http://localhost:3001
      - LOG_LEVEL=debug
    depends_on:
      - postgres-e2e
      - redis-e2e
      - backend-e2e
    restart: "no"
    networks:
      - e2e_network
    ports:
      - "8084:8082"  # Different port to avoid conflicts
    # Rely on built-in health check from Dockerfile

  frontend-e2e:
    image: ${FRONTEND_IMAGE:-ghcr.io/pangeafate/obsidiancomments-frontend:latest}
    environment:
      - VITE_API_URL=http://localhost:3001/api
      - VITE_WS_URL=ws://localhost:3001/ws
    expose:
      - "80"
    restart: "no"
    networks:
      - e2e_network
    ports:
      - "3002:80"  # Different port to avoid conflicts
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  nginx-e2e:
    image: nginx:alpine
    ports:
      - "3001:80"  # E2E test port
    volumes:
      - ./nginx-e2e.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend-e2e
      - backend-e2e
      - hocuspocus-e2e
    restart: "no"
    networks:
      - e2e_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

volumes:
  postgres_e2e_data:
    driver: local
  redis_e2e_data:
    driver: local

networks:
  e2e_network:
    driver: bridge
    name: obsidian_e2e_network