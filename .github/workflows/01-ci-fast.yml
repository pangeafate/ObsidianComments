name: "01 - CI Fast Lane"

# Fast CI that runs on every PR - target <5 minutes
on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  CACHE_KEY: v1

jobs:
  # Job 1: Lint & Type Check (fastest feedback)
  lint:
    name: "üîç Lint & Type Check"
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
            obsidian-plugin/node_modules
          key: ${{ runner.os }}-modules-${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}
      
      - name: Install dependencies
        run: |
          npm ci --no-audit
          cd packages/backend && npm ci --no-audit
          cd ../frontend && npm ci --no-audit
          cd ../hocuspocus && npm ci --no-audit
          cd ../../obsidian-plugin && npm ci --no-audit
      
      - name: Run linters in parallel
        run: |
          make lint &
          LINT_PID=$!
          
          # Type checking
          npx tsc --noEmit -p packages/backend/tsconfig.json &
          npx tsc --noEmit -p packages/frontend/tsconfig.json &
          npx tsc --noEmit -p packages/hocuspocus/tsconfig.json &
          
          wait $LINT_PID
          wait
      
      - name: Check for uncommitted changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "‚ùå Uncommitted changes detected after linting"
            git diff
            exit 1
          fi

  # Job 2: Unit Tests (no external deps)
  unit:
    name: "üß™ Unit Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      matrix:
        package: [backend, frontend, hocuspocus, obsidian-plugin]
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
            obsidian-plugin/node_modules
          key: ${{ runner.os }}-modules-${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}
      
      - name: Install package deps
        run: |
          if [ "${{ matrix.package }}" = "obsidian-plugin" ]; then
            cd obsidian-plugin && npm ci --no-audit
          else
            cd packages/${{ matrix.package }} && npm ci --no-audit
          fi
      
      - name: Run unit tests
        run: |
          if [ "${{ matrix.package }}" = "obsidian-plugin" ]; then
            cd obsidian-plugin
          else
            cd packages/${{ matrix.package }}
          fi
          npm test -- --coverage --maxWorkers=2 --testPathPattern="\.test\." || true
      
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: ${{ matrix.package }}
          token: ${{ secrets.CODECOV_TOKEN }}

  # Job 3: Build Docker images (cached aggressively)
  build:
    name: "üèóÔ∏è Build Images"
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [lint]  # Don't wait for tests
    strategy:
      matrix:
        service: [backend, frontend, hocuspocus]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./packages/${{ matrix.service }}
          file: ./packages/${{ matrix.service }}/Dockerfile.production
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-${{ matrix.service }}:${{ github.sha }}
            ghcr.io/${{ github.repository }}-${{ matrix.service }}:pr-${{ github.event.pull_request.number || 'main' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # Job 4: Quick smoke test
  smoke:
    name: "üî• Smoke Test"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [build]
    if: github.event.pull_request.draft == false
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
    steps:
      - uses: actions/checkout@v4
      
      - name: Start services with built images
        run: |
          docker run -d --name backend \
            --network ${{ job.container.network }} \
            -e DATABASE_URL=postgresql://postgres:test@postgres:5432/test \
            -e REDIS_URL=redis://redis:6379 \
            -e JWT_SECRET=test \
            -p 8081:8081 \
            ghcr.io/${{ github.repository }}-backend:${{ github.sha }}
          
          docker run -d --name frontend \
            --network ${{ job.container.network }} \
            -p 3000:80 \
            ghcr.io/${{ github.repository }}-frontend:${{ github.sha }}
      
      - name: Health check
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:8081/api/health; do sleep 2; done'
          echo "‚úÖ Services are healthy"
      
      - name: Quick API test
        run: |
          curl -X POST http://localhost:8081/api/notes/share \
            -H "Content-Type: application/json" \
            -d '{"title":"Smoke Test","content":"Test"}' \
            --fail

  # Final status for branch protection
  ci-status:
    name: "‚úÖ CI Status"
    runs-on: ubuntu-latest
    needs: [lint, unit, build, smoke]
    if: always()
    steps:
      - name: Check status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "‚ùå CI failed"
            exit 1
          else
            echo "‚úÖ All CI checks passed!"
          fi