name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

env:
  NODE_VERSION: '18'
  PRODUCTION_DOMAIN: obsidiancomments.serverado.app

jobs:
  test:
    name: Build & Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit

      - name: Lint
        run: npm run lint || true

      - name: Unit/CI tests (sharded)
        run: |
          if [ "${{ matrix.shard }}" = "1" ]; then
            npm run test:ci:backend
            npm run test:ci:hocuspocus
          else
            npm run test:ci:frontend || true
          fi

  e2e:
    name: E2E (docker-compose.e2e)
    runs-on: ubuntu-latest
    needs: [test]
    timeout-minutes: 25
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare base images (cache warm)
        run: |
          docker pull postgres:15
          docker pull redis:7-alpine
          docker pull node:18-alpine
          docker pull nginx:alpine

      - name: Start stack
        run: |
          cat > .env.test << EOF
          POSTGRES_DB=obsidian_comments_test
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=test_password
          JWT_SECRET=test_jwt_secret
          NODE_ENV=test
          CORS_ORIGIN=http://localhost
          EOF
          timeout 900 docker compose -f docker-compose.e2e.yml --env-file .env.test up -d --build

      - name: Wait for health
        run: |
          echo "Waiting for services to be healthy..."
          for i in {1..120}; do
            HEALTHY=$(docker compose -f docker-compose.e2e.yml ps | grep -c "healthy" || echo "0")
            if [ "$HEALTHY" -ge 4 ]; then echo "Healthy after $((i*5))s ($HEALTHY)"; break; fi
            if [ $i -eq 120 ]; then echo "Timeout waiting for health"; docker compose -f docker-compose.e2e.yml ps; docker compose -f docker-compose.e2e.yml logs --tail=80; exit 1; fi
            sleep 5
          done

      - name: Smoke via nginx
        run: |
          timeout 120 bash -c 'until curl -sf http://localhost/api/health; do echo waiting...; sleep 2; done'

      - name: Run Playwright tests (critical subset)
        env:
          CI: true
        run: |
          npx playwright install --with-deps
          timeout 450 npx playwright test tests/e2e/critical-path.spec.js --project=chromium --max-failures=1

      - name: Teardown
        if: always()
        run: docker compose -f docker-compose.e2e.yml down --volumes --remove-orphans

  build_images:
    name: Build images (optional push)
    runs-on: ubuntu-latest
    needs: [e2e]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: ./packages/backend
          file: ./packages/backend/Dockerfile.production
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/obsidiancomments-backend:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/obsidiancomments-backend:latest

      - name: Build & push hocuspocus
        uses: docker/build-push-action@v6
        with:
          context: ./packages/hocuspocus
          file: ./packages/hocuspocus/Dockerfile.production
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/obsidiancomments-hocuspocus:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/obsidiancomments-hocuspocus:latest

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./packages/frontend
          file: ./packages/frontend/Dockerfile.production
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/obsidiancomments-frontend:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/obsidiancomments-frontend:latest

  deploy_production:
    name: Deploy to Production (SSH)
    runs-on: ubuntu-latest
    needs: [build_images]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://${{ env.PRODUCTION_DOMAIN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare SSH
        run: |
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > id_ed25519
          chmod 600 id_ed25519
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Remote deploy via docker compose
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD || 'obsidian_prod_db_2025_secure' }}
          JWT_SECRET: ${{ secrets.JWT_SECRET || 'obsidian_jwt_secret_2025_production' }}
        run: |
          ssh -i id_ed25519 -o StrictHostKeyChecking=no "$DEPLOY_USER@$DEPLOY_HOST" << EOF
          set -e
          if [ -d ~/obsidian-comments ]; then cd ~/obsidian-comments; git fetch origin main; git reset --hard origin/main; else git clone https://github.com/$GITHUB_REPOSITORY.git ~/obsidian-comments && cd ~/obsidian-comments; fi
          export POSTGRES_PASSWORD='$POSTGRES_PASSWORD'
          export JWT_SECRET='$JWT_SECRET'
          chmod +x ./init-letsencrypt.sh
          chmod +x ./deploy-production.sh
          ./deploy-production.sh
          EOF

      - name: Wait and health check (remote)
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        run: |
          sleep 30
          ssh -i id_ed25519 -o StrictHostKeyChecking=no "$DEPLOY_USER@$DEPLOY_HOST" "cd ~/obsidian-comments && docker compose -f docker-compose.production.yml ps && curl -sf http://localhost/health || true"

      - name: External reachability
        run: |
          sleep 10
          getent hosts ${{ env.PRODUCTION_DOMAIN }} || true
          curl -sSf http://${{ env.PRODUCTION_DOMAIN }}/health || echo "HTTP health failed"
          curl -sSkf https://${{ env.PRODUCTION_DOMAIN }}/health || echo "HTTPS health check (may take time for SSL to be ready)"


