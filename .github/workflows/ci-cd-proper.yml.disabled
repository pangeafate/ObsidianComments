name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore: [ "**.md" ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      target_env:
        description: "Environment to deploy"
        required: false
        default: "staging"
        type: choice
        options:
          - staging
          - production

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

permissions:
  contents: read
  id-token: write
  packages: write
  deployments: write
  statuses: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CACHE_VERSION: v1

jobs:
  # Job 1: Build and Test
  build-test:
    name: "🔨 Build & Test"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [backend, frontend, hocuspocus]
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        working-directory: packages/${{ matrix.service }}
        run: npm ci --no-audit
        
      - name: Lint
        working-directory: packages/${{ matrix.service }}
        run: npm run lint
        
      - name: Run tests
        working-directory: packages/${{ matrix.service }}
        run: npm run test:ci
        
      - name: Build
        working-directory: packages/${{ matrix.service }}
        run: npm run build
        
      - name: Generate version
        id: version
        run: echo "version=${{ github.sha }}" >> $GITHUB_OUTPUT

  # Job 2: Build Docker Images
  docker-build:
    name: "🐳 Build Docker Images"
    needs: build-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [backend, frontend, hocuspocus]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./packages/${{ matrix.service }}
          file: ./packages/${{ matrix.service }}/Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GIT_SHA=${{ github.sha }}
            VERSION=${{ needs.build-test.outputs.version }}

  # Job 3: Deploy to Staging
  deploy-staging:
    name: "🚀 Deploy to Staging"
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.obsidiancomments.serverado.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Deployment would happen here via SSH or cloud provider API
          
      - name: Run database migrations
        run: |
          echo "📦 Running database migrations..."
          # npx prisma migrate deploy
          
      - name: Smoke test
        run: |
          echo "🧪 Running smoke tests..."
          curl -fS https://staging.obsidiancomments.serverado.app/api/health
          
      - name: Create GitHub Deployment
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: staging
          ref: ${{ github.sha }}
          description: "Staging deployment"
          auto-merge: false

  # Job 4: E2E Tests on Staging
  e2e-staging:
    name: "🎭 E2E Tests"
    needs: deploy-staging
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --no-audit
        
      - name: Install Playwright
        run: npx playwright install --with-deps chromium
        
      - name: Run E2E tests
        run: |
          npx playwright test --project=chromium
        env:
          BASE_URL: https://staging.obsidiancomments.serverado.app
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results-${{ github.sha }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  # Job 5: Deploy to Production
  deploy-production:
    name: "🌐 Deploy to Production"
    needs: [deploy-staging, e2e-staging]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://obsidiancomments.serverado.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to production server
        env:
          PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST || '138.197.187.49' }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          if [ -n "$SSH_PRIVATE_KEY" ]; then
            echo "🚀 Deploying to production via SSH..."
            mkdir -p ~/.ssh
            echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh-keyscan -H $PRODUCTION_HOST >> ~/.ssh/known_hosts 2>/dev/null
            
            ssh root@$PRODUCTION_HOST << 'ENDSSH'
              cd /root/obsidian-comments
              git pull origin main
              docker compose -f docker-compose.production.yml pull
              docker compose -f docker-compose.production.yml up -d
              docker system prune -f
            ENDSSH
          else
            echo "⚠️ No SSH key configured, using local deployment simulation"
            echo "Production deployment would happen here"
          fi
          
      - name: Run database migrations
        run: |
          echo "📦 Running production database migrations..."
          # This would SSH and run migrations on prod
          
      - name: Health check
        run: |
          echo "🧪 Running production health checks..."
          sleep 30
          curl -fS https://obsidiancomments.serverado.app/api/health || curl -fS http://138.197.187.49:8083/api/health
          
      - name: Create GitHub Deployment
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: production
          ref: ${{ github.sha }}
          description: "Production deployment"
          auto-merge: false

  # Job 6: Rollback (if needed)
  rollback-production:
    name: "⏮️ Rollback Production"
    if: failure() && needs.deploy-production.result == 'failure'
    needs: deploy-production
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Rollback to previous version
        env:
          PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST || '138.197.187.49' }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "⏮️ Rolling back production deployment..."
          if [ -n "$SSH_PRIVATE_KEY" ]; then
            mkdir -p ~/.ssh
            echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh-keyscan -H $PRODUCTION_HOST >> ~/.ssh/known_hosts 2>/dev/null
            
            ssh root@$PRODUCTION_HOST << 'ENDSSH'
              cd /root/obsidian-comments
              git reset --hard HEAD~1
              docker compose -f docker-compose.production.yml up -d
            ENDSSH
          else
            echo "⚠️ Manual rollback required"
          fi
          
      - name: Notify rollback
        run: |
          echo "⚠️ Production deployment rolled back to previous version"