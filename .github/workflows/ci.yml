name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: obsidian_comments_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        # Install ShareNote plugin dependencies
        cd obsidian-plugin && npm ci

    - name: Install database clients for health checks
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client redis-tools

    - name: Setup test environment
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/obsidian_comments_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test_jwt_secret
        NODE_ENV: test
      run: |
        # Wait for services to be healthy
        echo "Waiting for PostgreSQL to be ready..."
        timeout 60 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 2; done'
        
        echo "Waiting for Redis to be ready..."
        timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping | grep -q PONG; do sleep 2; done'
        
        # Create test environment file
        echo "DATABASE_URL=$DATABASE_URL" > .env.test
        echo "REDIS_URL=$REDIS_URL" >> .env.test
        echo "JWT_SECRET=$JWT_SECRET" >> .env.test
        echo "NODE_ENV=$NODE_ENV" >> .env.test
        
        # Generate Prisma client for both backend and hocuspocus
        npm run prisma:generate
        cd packages/hocuspocus && npx prisma generate
        
        # Apply database migrations to ensure schema is ready
        cd ../backend
        PGPASSWORD=test_password psql -h localhost -U postgres -d obsidian_comments_test -c "SELECT version();"
        npx prisma migrate deploy || npx prisma db push --force-reset --accept-data-loss
        
    - name: Run backend unit tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/obsidian_comments_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test_jwt_secret
        NODE_ENV: test
        CI: true
        MOCK_EXTERNAL_SERVICES: true
      run: |
        set -e  # Exit immediately if any command fails
        # Run backend tests (database is already set up) - MUST PASS
        cd packages/backend && npm test -- --testPathPattern="ci-validation.test.ts"

    - name: Run frontend unit tests
      env:
        CI: true
      run: |
        set -e  # Exit immediately if any command fails
        # Run frontend tests - MUST PASS
        cd packages/frontend && npm test -- --testPathPattern="ci-validation.test.tsx" --watchAll=false

    - name: Run hocuspocus unit tests  
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/obsidian_comments_test
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test
        CI: true
      run: |
        set -e  # Exit immediately if any command fails
        # Run hocuspocus tests (Prisma client already generated in setup) - MUST PASS  
        cd packages/hocuspocus && npm test -- --testPathPattern="ci-validation.test.ts"

    - name: Run ShareNote plugin unit tests
      env:
        CI: true
        NODE_ENV: test
      run: |
        set -e  # Exit immediately if any command fails
        # Run ShareNote plugin CI validation test - MUST PASS
        cd obsidian-plugin && npm test -- --testPathPattern="ci-validation.test.ts" --watchAll=false

    - name: Build frontend
      env:
        VITE_API_URL: http://localhost:8081/api
        VITE_WS_URL: ws://localhost:8082
      run: |
        npm run build:frontend

    - name: Build backend
      run: |
        npm run build:backend

    - name: Build hocuspocus
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/obsidian_comments_test
      run: |
        npm run build:hocuspocus

    - name: Build ShareNote plugin
      run: |
        cd obsidian-plugin && npm run build

  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: obsidian_comments_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        # Install ShareNote plugin dependencies
        cd obsidian-plugin && npm ci

    - name: Install database clients for health checks
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client redis-tools

    - name: Install Playwright
      run: npx playwright install --with-deps chromium

    - name: Build all services
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/obsidian_comments_test
        VITE_API_URL: http://localhost:8081/api
        VITE_WS_URL: ws://localhost:8082
      run: |
        npm run prisma:generate
        cd packages/hocuspocus && npx prisma generate
        cd ../..
        npm run build:backend
        npm run build:frontend
        npm run build:hocuspocus
        cd obsidian-plugin && npm run build

    - name: Start services for E2E testing
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/obsidian_comments_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test_jwt_secret
        NODE_ENV: test
        PORT: 8081
        CI: true
      run: |
        # Wait for services to be healthy
        echo "Waiting for PostgreSQL to be ready..."
        timeout 60 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 2; done'
        
        echo "Waiting for Redis to be ready..."
        timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping | grep -q PONG; do sleep 2; done'
        
        # Create database schema
        (cd packages/backend && npx prisma db push --force-reset --accept-data-loss)
        
        # Start services in background with explicit environment variables and logging
        echo "🔍 Environment check:"
        echo "DATABASE_URL: ${DATABASE_URL:0:50}..."
        echo "REDIS_URL: $REDIS_URL"
        echo "NODE_ENV: $NODE_ENV"
        
        echo "🚀 Starting Backend service with explicit env vars..."
        (cd packages/backend && DATABASE_URL="$DATABASE_URL" REDIS_URL="$REDIS_URL" JWT_SECRET="$JWT_SECRET" NODE_ENV="$NODE_ENV" PORT="$PORT" CI="$CI" npm start > backend.log 2>&1) &
        BACKEND_PID=$!
        
        echo "🚀 Starting Hocuspocus service with explicit env vars..."
        (cd packages/hocuspocus && DATABASE_URL="$DATABASE_URL" REDIS_URL="$REDIS_URL" NODE_ENV="$NODE_ENV" PORT=8082 CI="$CI" npm start > hocuspocus.log 2>&1) &
        HOCUSPOCUS_PID=$!
        
        echo "🚀 Starting Frontend service with CI config..."
        (cd packages/frontend && CI="$CI" NODE_ENV="$NODE_ENV" npm run preview -- --port 3001 --config vite.config.ci.ts > frontend.log 2>&1) &
        FRONTEND_PID=$!
        
        # Wait for services to start and check their logs
        echo "⏳ Waiting for services to initialize..."
        sleep 10
        
        # Check backend startup logs early
        echo "📋 Backend startup logs (first 20 lines):"
        head -20 packages/backend/backend.log 2>/dev/null || echo "❌ No backend logs yet"
        
        # Verify services are actually running
        echo "🔍 Service health check..."
        echo "Backend PID: $BACKEND_PID, Running: $(kill -0 $BACKEND_PID 2>/dev/null && echo 'YES' || echo 'NO')"
        echo "Hocuspocus PID: $HOCUSPOCUS_PID, Running: $(kill -0 $HOCUSPOCUS_PID 2>/dev/null && echo 'YES' || echo 'NO')"
        echo "Frontend PID: $FRONTEND_PID, Running: $(kill -0 $FRONTEND_PID 2>/dev/null && echo 'YES' || echo 'NO')"
        
        # Wait for backend to actually start serving requests
        echo "🔍 Waiting for backend API to be ready..."
        for i in {1..20}; do
          if curl -f http://localhost:8081/api/health 2>/dev/null; then
            echo "✅ Backend API is ready"
            break
          else
            echo "⏳ Backend not ready yet... ($i/20)"
            sleep 2
          fi
        done
        
        # Test API endpoints
        echo "🧪 Testing Backend API..."
        curl -f http://localhost:8081/api/health || echo "❌ Backend API not responding"
        
        echo "🧪 Testing Frontend..."
        curl -f http://localhost:3001/ || echo "❌ Frontend not responding"
        
        echo "🧪 Testing Document Creation API (the failing endpoint)..."
        curl -X POST http://localhost:8081/api/notes/share \
          -H "Content-Type: application/json" \
          -d '{"title":"CI Test","content":"Test content"}' \
          -v 2>&1 || echo "❌ Document creation API failed - this should show the actual 500 error"
        
        echo "🧪 Testing Document Creation API WITH shareId (like frontend)..."
        curl -X POST http://localhost:8081/api/notes/share \
          -H "Content-Type: application/json" \
          -d '{"title":"Frontend Test","content":"Test content","shareId":"test-doc-1754584736028-yim34va27"}' \
          -v 2>&1 || echo "❌ Frontend-style API request failed"
        
        echo ""
        echo "📋 BACKEND SERVICE LOGS (first 100 lines):"
        head -100 packages/backend/backend.log 2>/dev/null || echo "❌ No backend logs found"
        
        echo ""  
        echo "📋 HOCUSPOCUS SERVICE LOGS (first 50 lines):"
        head -50 packages/hocuspocus/hocuspocus.log 2>/dev/null || echo "❌ No hocuspocus logs found"

    - name: Run E2E tests
      env:
        TEST_URL: http://localhost:3001
        CI: true
      run: |
        set -e  # Exit immediately if any command fails
        
        # First test: Simple connectivity check
        echo "🧪 Step 1: Testing direct API access from E2E environment"
        curl -f http://localhost:8081/api/health || echo "❌ Direct backend access failed"
        
        echo "🧪 Step 2: Testing frontend proxy by making API request through frontend"
        curl -f http://localhost:3001/api/health || echo "❌ Frontend proxy to backend failed"
        
        # Second test: Create document via frontend proxy
        echo "🧪 Step 3: Testing document creation through frontend proxy"
        curl -X POST http://localhost:3001/api/notes/share \
          -H "Content-Type: application/json" \
          -d '{"title":"E2E Test","content":"Test content"}' \
          -v || echo "❌ Document creation via frontend proxy failed"
        
        echo "🧪 Step 4: Running minimal E2E test"
        # Run basic E2E test to verify deployment works - MUST PASS  
        timeout 300 npx playwright test tests/e2e/critical-path.spec.js --project=chromium --max-failures=1
        
        # Run ShareNote plugin integration test - MUST PASS
        echo "🔌 Testing ShareNote plugin integration..."
        timeout 120 npx playwright test tests/e2e/sharenote-plugin-integration.spec.js --project=chromium --max-failures=1

    - name: Collect service logs on failure
      if: failure()
      run: |
        echo "📋 Collecting service logs for debugging..."
        echo "=== Backend Logs ==="
        cat packages/backend/backend.log 2>/dev/null || echo "No backend logs found"
        echo "=== Hocuspocus Logs ==="
        cat packages/hocuspocus/hocuspocus.log 2>/dev/null || echo "No hocuspocus logs found"
        echo "=== Frontend Logs ==="
        cat packages/frontend/frontend.log 2>/dev/null || echo "No frontend logs found"
        
        echo "🔍 Final service status check..."
        ps aux | grep -E "(node|npm)" | grep -v grep || echo "No Node.js processes running"
        
        echo "🌐 Network connectivity test..."
        curl -I http://localhost:8081/ 2>/dev/null || echo "Backend port 8081 not responding"
        curl -I http://localhost:8082/ 2>/dev/null || echo "Hocuspocus port 8082 not responding"
        curl -I http://localhost:3001/ 2>/dev/null || echo "Frontend port 3001 not responding"

    - name: Upload service logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: service-logs
        path: |
          packages/backend/backend.log
          packages/hocuspocus/hocuspocus.log
          packages/frontend/frontend.log
        retention-days: 7

    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, e2e-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        # Install ShareNote plugin dependencies
        cd obsidian-plugin && npm ci

    - name: Build production assets
      env:
        VITE_API_URL: https://obsidiancomments.serverado.app/api
        VITE_WS_URL: wss://obsidiancomments.serverado.app/ws
        NODE_ENV: production
        DATABASE_URL: postgresql://postgres:password@localhost:5432/obsidian_comments
      run: |
        npm run prisma:generate
        cd packages/hocuspocus && npx prisma generate
        cd ../..
        npm run build:backend
        npm run build:frontend
        npm run build:hocuspocus
        cd obsidian-plugin && npm run build

    - name: Deploy to production server
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      run: |
        echo "$DEPLOY_KEY" > deploy_key
        chmod 600 deploy_key
        
        # Create required directories on production server
        ssh -i deploy_key -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST \
          "mkdir -p /opt/obsidian-comments/{packages,obsidian-plugin/release,scripts}"
        
        # Upload built assets, Prisma files, AND nginx configuration
        rsync -avz -e "ssh -i deploy_key -o StrictHostKeyChecking=no" \
          --exclude 'node_modules' \
          --exclude '.env*' \
          packages/ $DEPLOY_USER@$DEPLOY_HOST:/opt/obsidian-comments/packages/
        
        # Upload ShareNote plugin build
        rsync -avz -e "ssh -i deploy_key -o StrictHostKeyChecking=no" \
          obsidian-plugin/release/ $DEPLOY_USER@$DEPLOY_HOST:/opt/obsidian-comments/obsidian-plugin/release/
        
        rsync -avz -e "ssh -i deploy_key -o StrictHostKeyChecking=no" \
          nginx.conf $DEPLOY_USER@$DEPLOY_HOST:/opt/obsidian-comments/nginx.conf
          
        # Upload docker-compose file for database services
        rsync -avz -e "ssh -i deploy_key -o StrictHostKeyChecking=no" \
          docker-compose.simple.yml $DEPLOY_USER@$DEPLOY_HOST:/opt/obsidian-comments/docker-compose.simple.yml
        
        # Restart services and ensure all components are running
        ssh -i deploy_key -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
          cd /opt/obsidian-comments
          
          # Ensure environment file exists
          if [ ! -f .env.production ]; then
            echo "Creating production environment file..."
            echo "DATABASE_URL=postgresql://postgres:password@localhost:5432/obsidian_comments" > .env.production
            echo "REDIS_URL=redis://localhost:6379" >> .env.production
            echo "JWT_SECRET=production_jwt_secret_change_me" >> .env.production
            echo "NODE_ENV=production" >> .env.production
            echo "PORT=8081" >> .env.production
            echo "HOCUSPOCUS_PORT=8082" >> .env.production
            echo "FRONTEND_URL=https://obsidiancomments.serverado.app" >> .env.production
          fi
          
          # Start database services if not running
          docker-compose -f docker-compose.simple.yml --env-file .env.production up -d postgres redis || echo "Database services may already be running"
          
          # Wait for database to be ready
          sleep 5
          
          # Install dependencies for Prisma CLI if needed
          cd packages/backend
          [ -d node_modules ] || npm ci --production=false
          
          # Apply database migrations and generate Prisma client
          npx prisma generate
          npx prisma migrate deploy || npx prisma db push
          
          cd ../hocuspocus
          [ -d node_modules ] || npm ci --production=false
          npx prisma generate
          
          cd /opt/obsidian-comments
          
          # Restart PM2 services with environment variables
          pm2 delete backend 2>/dev/null || true
          pm2 delete hocuspocus 2>/dev/null || true
          
          pm2 start packages/backend/dist/index.js --name backend --env-file .env.production
          pm2 start packages/hocuspocus/dist/index.js --name hocuspocus --env-file .env.production
          pm2 save
          
          # Recreate nginx with updated configuration and proper volume mounts
          docker stop obsidian-nginx || true
          docker rm obsidian-nginx || true
          docker run -d --name obsidian-nginx --network host \
            -v /opt/obsidian-comments/nginx.conf:/etc/nginx/nginx.conf:ro \
            -v /etc/nginx/ssl:/etc/nginx/ssl:ro \
            -v /opt/obsidian-comments/packages/frontend/dist:/opt/obsidian-comments/packages/frontend/dist:ro \
            nginx:alpine
          
          # Show status for verification
          pm2 list
          docker ps | grep obsidian
        EOF
        
        rm deploy_key

    - name: Run production health check
      run: |
        echo "🔍 Waiting for services to start..."
        sleep 30
        
        echo "🌐 Testing HTTPS connectivity..."
        curl -I https://obsidiancomments.serverado.app/
        
        echo "🏥 Testing API health endpoint..."
        for i in {1..5}; do
          if curl -f https://obsidiancomments.serverado.app/api/health; then
            echo "✅ Production deployment successful!"
            break
          fi
          echo "⏳ Attempt $i failed, retrying in 10 seconds..."
          sleep 10
        done
        
        echo "🔍 Testing CORS headers (CRITICAL)..."
        # Test actual POST request to trigger backend CORS
        curl -si -X POST https://obsidiancomments.serverado.app/api/notes/share \
          -H "Content-Type: application/json" \
          -H "Origin: app://obsidian.md" \
          -d '{}' | head -20 | tee headers.txt
        
        # Check if CORS header is present and correct
        if grep -i 'access-control-allow-origin: app://obsidian.md' headers.txt; then
          echo "✅ CORS headers configured correctly for Obsidian!"
        else
          echo "❌ CORS ERROR: Expected 'Access-Control-Allow-Origin: app://obsidian.md' header"
          echo "Found headers:"
          grep -i 'access-control-allow-origin' headers.txt || echo "No CORS headers found"
          exit 1
        fi
        
        echo "🔌 Testing ShareNote plugin HTML sharing endpoint..."
        curl -X POST https://obsidiancomments.serverado.app/api/notes/share \
          -H "Content-Type: application/json" \
          -H "Origin: app://obsidian.md" \
          -d '{"title":"CI Health Check","content":"# CI Health Check\n\nTesting HTML sharing","htmlContent":"<h1>CI Health Check</h1><p>Testing HTML sharing</p>"}' \
          --fail --silent
        
        echo "🔍 Manual check: https://obsidiancomments.serverado.app"