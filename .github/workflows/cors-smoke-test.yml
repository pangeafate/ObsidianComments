name: CORS Smoke Test

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours

jobs:
  cors-check:
    name: Verify CORS Headers
    runs-on: ubuntu-latest
    
    steps:
    - name: Check production CORS headers
      run: |
        set -e
        echo "üîç Testing CORS headers on production..."
        
        # Test with Obsidian origin
        echo "=== Testing with app://obsidian.md origin ==="
        curl -sI -H 'Origin: app://obsidian.md' \
          http://obsidiancomments.serverado.app/api/notes/share | tee headers.txt
        
        # Fail if wildcard appears
        if grep -i 'access-control-allow-origin: \*' headers.txt; then
          echo "‚ùå FAILED: nginx is still adding wildcard CORS headers"
          echo "Found headers:"
          grep -i 'access-control' headers.txt
          exit 1
        fi
        
        # Fail if there are multiple CORS origin headers
        CORS_COUNT=$(grep -i '^access-control-allow-origin:' headers.txt | wc -l)
        if [ "$CORS_COUNT" -ne 1 ]; then
          echo "‚ùå FAILED: Found $CORS_COUNT Access-Control-Allow-Origin headers (expected 1)"
          echo "Headers found:"
          grep -i '^access-control-allow-origin:' headers.txt
          exit 1
        fi
        
        # Verify correct origin is returned
        if ! grep -i 'access-control-allow-origin: app://obsidian.md' headers.txt; then
          echo "‚ùå FAILED: Wrong origin returned"
          grep -i 'access-control-allow-origin:' headers.txt
          exit 1
        fi
        
        echo "‚úÖ CORS headers are correct for Obsidian!"
        
        # Test with web origin
        echo ""
        echo "=== Testing with web origin ==="
        curl -sI -H 'Origin: http://obsidiancomments.serverado.app' \
          http://obsidiancomments.serverado.app/api/notes/share | tee headers2.txt
        
        CORS_COUNT=$(grep -i '^access-control-allow-origin:' headers2.txt | wc -l)
        if [ "$CORS_COUNT" -ne 1 ]; then
          echo "‚ùå FAILED: Multiple CORS headers for web origin"
          exit 1
        fi
        
        echo "‚úÖ All CORS checks passed!"
        
    - name: Test OPTIONS preflight
      run: |
        echo "üîç Testing OPTIONS preflight..."
        curl -sI -X OPTIONS \
          -H 'Origin: app://obsidian.md' \
          -H 'Access-Control-Request-Method: POST' \
          -H 'Access-Control-Request-Headers: Content-Type,Authorization' \
          http://obsidiancomments.serverado.app/api/notes/share | tee options.txt
        
        # Should get single CORS header
        CORS_COUNT=$(grep -i '^access-control-allow-origin:' options.txt | wc -l)
        if [ "$CORS_COUNT" -ne 1 ]; then
          echo "‚ùå FAILED: Multiple CORS headers in OPTIONS response"
          grep -i 'access-control' options.txt
          exit 1
        fi
        
        echo "‚úÖ OPTIONS preflight is correct!"
        
    - name: Create issue on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'üö® CORS Headers Broken in Production',
            body: `The CORS smoke test failed. Production is returning multiple or incorrect CORS headers.
            
            Check the workflow run: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
            
            This usually means:
            1. nginx is still adding wildcard CORS headers
            2. Multiple components are setting CORS headers
            3. The deployment didn't properly update nginx configuration`,
            labels: ['bug', 'urgent', 'cors']
          })